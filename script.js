// Formspree endpoints - –†–ê–ó–ù–´–ï –î–õ–Ø –ö–ê–ñ–î–û–ô –§–û–†–ú–´!
    const FORMSPREE_ENDPOINT_TEST = 'https://formspree.io/f/xgvnkwgl'; // –¥–ª—è —Ç–µ—Å—Ç–∞
    const FORMSPREE_ENDPOINT_BOOKING = 'https://formspree.io/f/xgvnkwgl'; // –¥–ª—è –∑–∞–ø–∏—Å–∏ (–ø–æ–∫–∞ —Ç–æ—Ç –∂–µ, –∑–∞–º–µ–Ω–∏—Ç–µ!)

    // Mobile menu toggle
    document.querySelector('.mobile-menu-btn').addEventListener('click', function() {
        document.querySelector('.nav-links').classList.toggle('active');
    });

    // Show/hide seasonal description
    document.querySelectorAll('input[name="seasonal_dependency"]').forEach(radio => {
        radio.addEventListener('change', function() {
            const descriptionBlock = document.getElementById('seasonalDescription');
            descriptionBlock.style.display = this.value === 'yes' ? 'block' : 'none';
        });
    });

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            document.querySelector('.nav-links').classList.remove('active');
            
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Scroll animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);

    // Observe all sections for animation
    document.querySelectorAll('section').forEach(section => {
        observer.observe(section);
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    function createRussianText(formData) {
        let russianText = "–ê–ù–ö–ï–¢–ê –ñ–ï–ù–°–ö–û–ì–û –õ–ò–ë–ò–î–û\n\n";
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        const valueMapping = {
            // –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞
            'never': '–í–æ–æ–±—â–µ –Ω–µ —Ö–æ—á–µ—Ç—Å—è',
            'weekly': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
            '3days': '1 —Ä–∞–∑ –≤ 3 –¥–Ω—è',
            '2days': '–ß–µ—Ä–µ–∑ –¥–µ–Ω—å',
            'daily': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å',
            'multiple': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ –º–Ω–æ–≥–æ —Ä–∞–∑',
            
            // –°–∏–ª–∞ –∂–µ–ª–∞–Ω–∏—è
            'light': '–õ–µ–≥–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
            'medium': '–°—Ä–µ–¥–Ω–µ–µ –∂–µ–ª–∞–Ω–∏–µ',
            'strong': '–°–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
            'very_strong': '–û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
            'maximal': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∏–ª—å–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ',
            
            // –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            'not_at_all': '–í–æ–æ–±—â–µ –Ω–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç',
            'slightly': '–ù–µ–º–Ω–æ–≥–æ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç',
            'moderately': '–°—Ä–µ–¥–Ω–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç',
            'strongly': '–°–∏–ª—å–Ω–æ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç',
            'very_strongly': '–û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç',
            
            // –°–µ–∑–æ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            'no': '–ù–µ—Ç',
            'yes': '–î–∞'
        };

        const periodNames = {
            'period1': '–û—Ç –∫–æ–Ω—Ü–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–æ –æ–≤—É–ª—è—Ü–∏–∏',
            'period2': '–í –ø–µ—Ä–∏–æ–¥ –æ–≤—É–ª—è—Ü–∏–∏',
            'period3': '–û—Ç –∫–æ–Ω—Ü–∞ –æ–≤—É–ª—è—Ü–∏–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—á–Ω—ã—Ö',
            'period4': '–í –ø–µ—Ä–∏–æ–¥ –º–µ—Å—è—á–Ω—ã—Ö'
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if (formData.get('general_frequency')) {
            russianText += `–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –õ–ò–ë–ò–î–û:\n`;
            russianText += `–ö–∞–∫ —á–∞—Å—Ç–æ –≤ —Ü–µ–ª–æ–º —Ö–æ—á–µ—Ç—Å—è —Å–µ–∫—Å–∞: ${valueMapping[formData.get('general_frequency')] || formData.get('general_frequency')}\n`;
            russianText += `–°–∏–ª–∞ –∂–µ–ª–∞–Ω–∏—è: ${valueMapping[formData.get('desire_strength')] || formData.get('desire_strength')}\n`;
            russianText += `–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç –≤–∏–¥–∞: ${valueMapping[formData.get('arousal_penis')] || formData.get('arousal_penis')}\n\n`;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
        for (let i = 1; i <= 4; i++) {
            const periodKey = `period${i}`;
            const noDesireFreq = formData.get(`${periodKey}_no_desire_frequency`);
            const desireStrength = formData.get(`${periodKey}_desire_strength`);
            const noDesireArousal = formData.get(`${periodKey}_no_desire_arousal`);
            const desireArousal = formData.get(`${periodKey}_desire_arousal`);

            if (noDesireFreq || desireStrength) {
                russianText += `${periodNames[periodKey]}:\n`;
                
                if (noDesireFreq || noDesireArousal) {
                    russianText += `–í –¥–Ω–∏, –∫–æ–≥–¥–∞ –ù–ï —Ö–æ—á–µ—Ç—Å—è —Å–µ–∫—Å–∞:\n`;
                    if (noDesireFreq) russianText += `  –ß–∞—Å—Ç–æ—Ç–∞: ${valueMapping[noDesireFreq] || noDesireFreq}\n`;
                    if (noDesireArousal) russianText += `  –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ: ${valueMapping[noDesireArousal] || noDesireArousal}\n`;
                }
                
                if (desireStrength || desireArousal) {
                    russianText += `–í –¥–Ω–∏, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è —Å–µ–∫—Å–∞:\n`;
                    if (desireStrength) russianText += `  –°–∏–ª–∞ –∂–µ–ª–∞–Ω–∏—è: ${valueMapping[desireStrength] || desireStrength}\n`;
                    if (desireArousal) russianText += `  –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ: ${valueMapping[desireArousal] || desireArousal}\n`;
                }
                russianText += '\n';
            }
        }

        // –°–µ–∑–æ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if (formData.get('seasonal_dependency')) {
            russianText += `–°–ï–ó–û–ù–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:\n`;
            russianText += `–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞: ${valueMapping[formData.get('seasonal_dependency')] || formData.get('seasonal_dependency')}\n`;
            if (formData.get('seasonal_changes')) {
                russianText += `–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${formData.get('seasonal_changes')}\n`;
            }
        }

        return russianText;
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async function handleFormSubmit(form, submitBtn, messageEl, successMessage, isTestForm = false) {
        event.preventDefault();
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        const formData = new FormData(form);
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
        const endpoint = isTestForm ? FORMSPREE_ENDPOINT_TEST : FORMSPREE_ENDPOINT_BOOKING;
        
        // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
        if (isTestForm) {
            const russianText = createRussianText(formData);
            formData.append('russian_version', russianText);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            formData.append('–û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞', formData.get('general_frequency') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            formData.append('–°–∏–ª–∞ –∂–µ–ª–∞–Ω–∏—è', formData.get('desire_strength') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            formData.append('–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –æ—Ç –≤–∏–¥–∞', formData.get('arousal_penis') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        }
        
        // –î–ª—è —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!isTestForm) {
            formData.append('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', formData.get('name') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            formData.append('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', formData.get('contact') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            formData.append('–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', formData.get('service') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
            formData.append('–°–æ–æ–±—â–µ–Ω–∏–µ', formData.get('message') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
        }
        
        try {
            const response = await fetch(endpoint, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (response.ok) {
                messageEl.textContent = successMessage;
                messageEl.className = 'form-message success';
                messageEl.style.display = 'block';
                
                form.reset();
                
                const seasonalDesc = document.getElementById('seasonalDescription');
                if (seasonalDesc) seasonalDesc.style.display = 'none';
                
            } else {
                throw new Error('Form submission failed');
            }
            
        } catch (error) {
            console.error('Form submission error:', error);
            messageEl.innerHTML = `
                <strong>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.</strong><br>
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é:<br>
                üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (905) 595-99-96<br>
                ‚úâÔ∏è Telegram: @Tan4ik77G<br>
                üìß Email: Tan4ik017@gmail.com
            `;
            messageEl.className = 'form-message error';
            messageEl.style.display = 'block';
        } finally {
            submitBtn.disabled = false;
            if (isTestForm) {
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É';
            } else {
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
            }
            
            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
            messageEl.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center',
                inline: 'nearest'
            });
        }
    }

    // Booking form submission
    document.getElementById('bookingForm').addEventListener('submit', function(e) {
        handleFormSubmit(
            this, 
            document.getElementById('bookingSubmitBtn'),
            document.getElementById('bookingMessage'),
            '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∑–∞—è–≤–∫—É! –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.',
            false
        );
    });

    // Test form submission
    document.getElementById('libidoTestForm').addEventListener('submit', function(e) {
        handleFormSubmit(
            this,
            document.getElementById('testSubmitBtn'),
            document.getElementById('testMessage'),
            '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.',
            true
        );
    });

    // Add hover effects to all interactive elements
    document.querySelectorAll('.btn, .service-card, .step, .contact-item, .option-item').forEach(element => {
        element.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.02)';
        });
        
        element.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏)
    document.addEventListener('change', function(e) {
        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø–æ–ª–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º
        if (e.target.name && e.target.name.includes('_mobile')) {
            const mainFieldName = e.target.name.replace('_mobile', '');
            const mainField = document.querySelector(`[name="${mainFieldName}"]`);
            if (mainField) {
                mainField.value = e.target.value;
            }
        }
        
        // –ò –Ω–∞–æ–±–æ—Ä–æ—Ç - –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –º–æ–±–∏–ª—å–Ω—ã–º
        if (e.target.name && !e.target.name.includes('_mobile')) {
            const mobileFieldName = e.target.name + '_mobile';
            const mobileField = document.querySelector(`[name="${mobileFieldName}"]`);
            if (mobileField) {
                mobileField.value = e.target.value;
            }
        }
    });

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    function ensureTestVisibility() {
        if (window.innerWidth <= 768) {
            const testSection = document.getElementById('test');
            const mobileCards = document.querySelectorAll('.mobile-period-card');
            const tables = document.querySelectorAll('.period-table');
            
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–µ—Å—Ç –≤–∏–¥–µ–Ω
            if (testSection) {
                testSection.style.display = 'block';
                testSection.style.visibility = 'visible';
                testSection.style.opacity = '1';
            }
            
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–Ω—ã
            mobileCards.forEach(card => {
                card.style.display = 'block';
                card.style.visibility = 'visible';
                card.style.opacity = '1';
            });
            
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–∫—Ä—ã—Ç—ã
            tables.forEach(table => {
                table.style.display = 'none';
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('load', ensureTestVisibility);
    window.addEventListener('resize', ensureTestVisibility);
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', ensureTestVisibility);

